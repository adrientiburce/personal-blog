<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on Adrien Tiburce</title><link>https://adrien-blog.netlify.app/tags/php/</link><description>Recent content in php on Adrien Tiburce</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://adrien-blog.netlify.app/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Absinthe</title><link>https://adrien-blog.netlify.app/project/absinthe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://adrien-blog.netlify.app/project/absinthe/</guid><description/></item><item><title>Unit Testing : from PhpUnit to Coverage Report</title><link>https://adrien-blog.netlify.app/post/php-unit/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://adrien-blog.netlify.app/post/php-unit/</guid><description>If you want to be confident each time you add a new functionality in your code, or when you need to change some old code of your application unit tests are a necessity. In this article, I will not try to convince the few (I hope) developers reticent with unit testing but rather showing you how to implement it without hustles.
1. Installing our tools PhpUnit : it will run all our tests On a Symfony project simply run composer require â€” dev symfony/phpunit-bridge</description></item></channel></rss>